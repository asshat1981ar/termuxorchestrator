#!/bin/bash
# Termux Environment Setup for NLâ†’App Orchestrator
# Creates secure environment file with API key placeholders

set -euo pipefail

ENV_FILE="$HOME/.termux_orchestrator_env"
BASHRC_FILE="$HOME/.bashrc"
LOG_DIR="$HOME/.orchestrator/logs"
LOG_FILE="$LOG_DIR/setup_env.log"

# Create log directory
mkdir -p "$LOG_DIR"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Create environment file
create_env_file() {
    log "Creating environment file at $ENV_FILE"
    
    cat > "$ENV_FILE" << 'EOF'
# Termux Orchestrator Environment Configuration
# Generated by setup_env.sh

# API Keys (replace with your actual keys)
export OPENAI_API_KEY="your_openai_api_key_here"
export ANTHROPIC_API_KEY="your_anthropic_api_key_here"
export DEEPSEEK_API_KEY="your_deepseek_api_key_here"
export GOOGLE_API_KEY="your_google_api_key_here"
export GITHUB_TOKEN="your_github_token_here"

# Orchestrator Configuration
export ORCHESTRATOR_HOME="$HOME/termux-orchestrator"
export ORCHESTRATOR_LOG_LEVEL="info"
export ORCHESTRATOR_WORKSPACE="$HOME/orchestrator-workspace"

# Development Settings
export NODE_ENV="development"
export FORCE_COLOR=1

# Path additions
export PATH="$ORCHESTRATOR_HOME/bin:$PATH"
EOF

    # Set secure permissions
    chmod 600 "$ENV_FILE"
    log "Environment file created with secure permissions (600)"
}

# Add sourcing to bashrc
setup_bashrc_sourcing() {
    local source_line="source $ENV_FILE"
    
    if grep -Fq "$source_line" "$BASHRC_FILE" 2>/dev/null; then
        log "Environment sourcing already present in .bashrc"
    else
        log "Adding environment sourcing to .bashrc"
        echo "" >> "$BASHRC_FILE"
        echo "# Termux Orchestrator environment" >> "$BASHRC_FILE"
        echo "$source_line" >> "$BASHRC_FILE"
        log "Added sourcing line to .bashrc"
    fi
}

# Create helper command
create_helper_command() {
    local helper_script="$HOME/.local/bin/orchestrator-env-source"
    
    mkdir -p "$(dirname "$helper_script")"
    
    cat > "$helper_script" << EOF
#!/bin/bash
# Helper to source orchestrator environment
source "$ENV_FILE"
echo "Orchestrator environment loaded"
EOF
    
    chmod +x "$helper_script"
    log "Created helper command: orchestrator-env-source"
}

# Validate environment file
validate_env_file() {
    if [ -f "$ENV_FILE" ]; then
        # Check if file can be sourced without errors
        if bash -n "$ENV_FILE"; then
            log "Environment file validation passed"
            return 0
        else
            log "ERROR: Environment file has syntax errors"
            return 1
        fi
    else
        log "ERROR: Environment file was not created"
        return 1
    fi
}

# Main setup function
main() {
    log "Starting Termux environment setup"
    
    # Backup existing env file if present
    if [ -f "$ENV_FILE" ]; then
        local backup_file="${ENV_FILE}.backup.$(date +%s)"
        cp "$ENV_FILE" "$backup_file"
        log "Backed up existing environment file to $backup_file"
    fi
    
    create_env_file
    setup_bashrc_sourcing
    create_helper_command
    
    if validate_env_file; then
        log "Environment setup completed successfully"
        echo ""
        echo "Next steps:"
        echo "1. Edit $ENV_FILE and add your actual API keys"
        echo "2. Run: source $ENV_FILE (or restart shell)"
        echo "3. Test with: orchestrator-env-source"
        echo ""
        echo "Environment file location: $ENV_FILE"
    else
        log "ERROR: Environment setup failed validation"
        exit 1
    fi
}

# Show usage if --help
if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
    cat << EOF
Termux Environment Setup

Creates ~/.termux_orchestrator_env with secure permissions and API key placeholders.
Also adds sourcing to ~/.bashrc and creates helper commands.

Usage: $0

Files created:
- $ENV_FILE (mode 600)
- Helper command: orchestrator-env-source

Logs are written to: $LOG_FILE
EOF
    exit 0
fi

main "$@"