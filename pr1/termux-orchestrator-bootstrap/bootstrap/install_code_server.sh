#!/bin/bash
# Code-Server Installation for Termux
# Safe, idempotent installation of code-server

set -euo pipefail

LOG_DIR="$HOME/.orchestrator/logs"
LOG_FILE="$LOG_DIR/code_server.log"
CODE_SERVER_DIR="$HOME/.local/lib/code-server"
CODE_SERVER_BIN="$HOME/.local/bin/code-server"
CONFIG_DIR="$HOME/.config/code-server"

# Create log directory
mkdir -p "$LOG_DIR"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Check if code-server is already installed
is_code_server_installed() {
    [ -x "$CODE_SERVER_BIN" ] && "$CODE_SERVER_BIN" --version >/dev/null 2>&1
}

# Get latest stable version
get_latest_version() {
    log "Fetching latest code-server version..."
    if command -v curl >/dev/null; then
        curl -s https://api.github.com/repos/coder/code-server/releases/latest | grep '"tag_name"' | cut -d'"' -f4 | sed 's/^v//'
    else
        log "WARNING: curl not available, using hardcoded version"
        echo "4.16.1"
    fi
}

# Download and install code-server
install_code_server() {
    local version
    version=$(get_latest_version)
    log "Installing code-server version: $version"
    
    local arch
    case "$(uname -m)" in
        aarch64) arch="arm64" ;;
        armv7l) arch="armhf" ;;
        x86_64) arch="amd64" ;;
        *) 
            log "ERROR: Unsupported architecture: $(uname -m)"
            exit 1
            ;;
    esac
    
    local download_url="https://github.com/coder/code-server/releases/download/v${version}/code-server-${version}-linux-${arch}.tar.gz"
    local temp_file="/tmp/code-server.tar.gz"
    local temp_dir="/tmp/code-server-install"
    
    log "Downloading from: $download_url"
    
    # Download
    if ! wget -O "$temp_file" "$download_url"; then
        log "ERROR: Failed to download code-server"
        exit 1
    fi
    
    # Create directories
    mkdir -p "$CODE_SERVER_DIR" "$(dirname "$CODE_SERVER_BIN")" "$temp_dir"
    
    # Extract
    log "Extracting code-server..."
    if ! tar -xzf "$temp_file" -C "$temp_dir" --strip-components=1; then
        log "ERROR: Failed to extract code-server"
        exit 1
    fi
    
    # Install
    cp -r "$temp_dir"/* "$CODE_SERVER_DIR/"
    ln -sf "$CODE_SERVER_DIR/bin/code-server" "$CODE_SERVER_BIN"
    
    # Cleanup
    rm -rf "$temp_file" "$temp_dir"
    
    log "Code-server installed successfully"
}

# Create configuration
create_config() {
    log "Creating code-server configuration..."
    
    mkdir -p "$CONFIG_DIR"
    
    cat > "$CONFIG_DIR/config.yaml" << EOF
# Code-server configuration for Termux
# Generated by install_code_server.sh

bind-addr: 0.0.0.0:8080
auth: password
password: termux123
cert: false

# Termux-specific settings
disable-telemetry: true
disable-update-check: true
EOF
    
    chmod 600 "$CONFIG_DIR/config.yaml"
    log "Configuration created at $CONFIG_DIR/config.yaml"
}

# Create startup script
create_startup_script() {
    local startup_script="$HOME/.local/bin/start-code-server"
    
    cat > "$startup_script" << 'EOF'
#!/bin/bash
# Code-server startup script for Termux

set -e

CONFIG_FILE="$HOME/.config/code-server/config.yaml"
LOG_FILE="$HOME/.orchestrator/logs/code_server_run.log"

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting code-server..." | tee -a "$LOG_FILE"

# Check if config exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "ERROR: Config file not found: $CONFIG_FILE"
    exit 1
fi

# Get local IP for convenience
LOCAL_IP=$(ifconfig 2>/dev/null | grep -E "inet.*192\.168\.|inet.*10\.|inet.*172\." | head -1 | awk '{print $2}' | cut -d: -f2)

echo "Starting code-server on http://0.0.0.0:8080"
if [ -n "$LOCAL_IP" ]; then
    echo "Access from other devices: http://$LOCAL_IP:8080"
fi
echo "Default password: termux123 (change in $CONFIG_FILE)"
echo "Logs: $LOG_FILE"
echo ""

# Start code-server
exec "$HOME/.local/bin/code-server" "$@" 2>&1 | tee -a "$LOG_FILE"
EOF
    
    chmod +x "$startup_script"
    log "Created startup script: $startup_script"
}

# Security warning
show_security_warning() {
    cat << 'EOF'

⚠️  SECURITY WARNING ⚠️

Code-server is configured to bind to 0.0.0.0:8080 with a default password.
This means anyone on your network can access your development environment.

RECOMMENDED ACTIONS:
1. Change the default password in ~/.config/code-server/config.yaml
2. Consider using SSH tunneling for remote access
3. Only run code-server on trusted networks

To start code-server: start-code-server
To stop: Ctrl+C or kill the process

EOF
}

# Main installation function
main() {
    log "Starting code-server installation"
    
    if is_code_server_installed; then
        log "Code-server is already installed: $("$CODE_SERVER_BIN" --version)"
        echo "Code-server is already installed and working."
    else
        # Check prerequisites
        if ! command -v wget >/dev/null; then
            log "ERROR: wget is required but not installed"
            echo "Please run: pkg install wget"
            exit 1
        fi
        
        install_code_server
        
        if ! is_code_server_installed; then
            log "ERROR: Code-server installation failed"
            exit 1
        fi
    fi
    
    create_config
    create_startup_script
    
    log "Code-server setup completed successfully"
    show_security_warning
}

# Show usage if --help
if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
    cat << EOF
Code-Server Installation for Termux

Installs the latest stable version of code-server with Termux-optimized configuration.

Usage: $0

Features:
- Downloads latest stable release
- Creates secure configuration
- Provides startup script: start-code-server
- Logs installation and runtime

Files created:
- $CODE_SERVER_BIN (symlink)
- $CONFIG_DIR/config.yaml
- ~/.local/bin/start-code-server

Logs are written to: $LOG_FILE
EOF
    exit 0
fi

main "$@"