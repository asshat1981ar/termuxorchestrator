#!/data/data/com.termux/files/usr/bin/bash
###############################################################################
# Termux Orchestrator Environment Setup Script
# Sets up environment variables, API keys, and shell configuration
###############################################################################

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
ORCHESTRATOR_HOME="$HOME/.orchestrator"
ENV_FILE="$HOME/.termux_orchestrator_env"
LOG_FILE="$ORCHESTRATOR_HOME/logs/setup_env.log"
BACKUP_FILE="$ENV_FILE.backup.$(date +%Y%m%d_%H%M%S)"

# Logging function
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
    
    case $level in
        "ERROR") echo -e "${RED}❌ $message${NC}" ;;
        "SUCCESS") echo -e "${GREEN}✅ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "INFO") echo -e "${BLUE}ℹ️  $message${NC}" ;;
    esac
}

# Ensure directories exist
setup_directories() {
    log "INFO" "Setting up directory structure..."
    
    mkdir -p "$ORCHESTRATOR_HOME"/{logs,cache,tmp}
    mkdir -p "$HOME/tmp/orchestrator"
    
    # Set proper permissions
    chmod 700 "$ORCHESTRATOR_HOME"
    chmod 755 "$ORCHESTRATOR_HOME"/{logs,cache,tmp}
    
    log "SUCCESS" "Directory structure created"
}

# Backup existing environment file
backup_existing_env() {
    if [ -f "$ENV_FILE" ]; then
        log "INFO" "Backing up existing environment file..."
        cp "$ENV_FILE" "$BACKUP_FILE"
        log "SUCCESS" "Backup created: $BACKUP_FILE"
    fi
}

# Create environment file with placeholders
create_env_file() {
    log "INFO" "Creating environment configuration file..."
    
    cat > "$ENV_FILE" << 'EOF'
###############################################################################
# Termux Orchestrator Environment Configuration
# Auto-generated by setup_env.sh
###############################################################################

# Core paths
export ORCHESTRATOR_HOME="$HOME/.orchestrator"
export PATH="$PATH:$HOME/.local/bin:$ORCHESTRATOR_HOME/bin"

# Logging
export LOG_LEVEL="info"
export ORCHESTRATOR_LOG_FILE="$ORCHESTRATOR_HOME/logs/orchestrator.log"

# GitHub credentials (get from https://github.com/settings/tokens)
export GITHUB_TOKEN="your_github_token_here"
export GITHUB_USERNAME="your_github_username"

# AI API Keys
export OPENAI_API_KEY="your_openai_key_here"
export ANTHROPIC_API_KEY="your_anthropic_key_here"  
export GOOGLE_API_KEY="your_google_api_key_here"
export DEEPSEEK_API_KEY="your_deepseek_key_here"

# Expo/EAS credentials (get from https://expo.dev/accounts/[username]/settings/access-tokens)
export EXPO_TOKEN="your_expo_token_here"

# Codemagic credentials (get from https://codemagic.io/teams/your-team/personal-account/settings)
export CODEMAGIC_ACCESS_TOKEN="your_codemagic_token_here"
export CODEMAGIC_PROJECT_ID="your_project_id_here"

# Android keystore credentials
export KEYSTORE_PASSWORD="your_keystore_password"
export KEY_PASSWORD="your_key_password"
export KEY_ALIAS="your_key_alias"
export KEYSTORE_PATH="$HOME/.orchestrator/keystore.jks"

# Temporary and cache directories
export TMP_DIR="$HOME/tmp/orchestrator"
export CACHE_DIR="$ORCHESTRATOR_HOME/cache"

# AI Agent Configuration
export AI_TIMEOUT="120000"  # 2 minutes
export AI_RETRIES="3"
export AI_FALLBACK_ENABLED="true"

# Build Configuration
export DEFAULT_FRAMEWORK="react-native"
export DEFAULT_PLATFORM="android"
export BUILD_TIMEOUT="1800"  # 30 minutes

# Helper functions
orchestrator-env-source() {
    if [ -f "$HOME/.termux_orchestrator_env" ]; then
        source "$HOME/.termux_orchestrator_env"
        echo "✅ Orchestrator environment loaded"
    else
        echo "❌ Orchestrator environment file not found"
    fi
}

orchestrator-env-edit() {
    if command -v code-server &> /dev/null; then
        code-server "$HOME/.termux_orchestrator_env"
    else
        nano "$HOME/.termux_orchestrator_env"
    fi
}

orchestrator-env-validate() {
    local missing=()
    
    [ -z "$GITHUB_TOKEN" ] && missing+=("GITHUB_TOKEN")
    [ -z "$EXPO_TOKEN" ] && missing+=("EXPO_TOKEN")
    [ "$OPENAI_API_KEY" = "your_openai_key_here" ] && missing+=("OPENAI_API_KEY")
    
    if [ ${#missing[@]} -eq 0 ]; then
        echo "✅ All critical environment variables are set"
        return 0
    else
        echo "❌ Missing or placeholder values for: ${missing[*]}"
        echo "Run: orchestrator-env-edit"
        return 1
    fi
}

# Aliases for convenience
alias o='orchestrator'
alias oe='orchestrator-env-edit'
alias ov='orchestrator-env-validate'
alias os='orchestrator-env-source'
alias cs='start-code-server'
alias ll='ls -la'
alias la='ls -A'
alias l='ls -CF'

# Auto-load environment on shell start
if [ -n "$BASH_VERSION" ]; then
    echo "🤖 Termux Orchestrator environment loaded"
    orchestrator-env-validate 2>/dev/null || true
fi

EOF

    # Set secure permissions
    chmod 600 "$ENV_FILE"
    
    log "SUCCESS" "Environment file created: $ENV_FILE"
}

# Add auto-sourcing to shell profile
setup_auto_sourcing() {
    local shell_profile="$HOME/.bashrc"
    local source_line="source \$HOME/.termux_orchestrator_env"
    
    log "INFO" "Setting up auto-sourcing in shell profile..."
    
    # Check if already added
    if ! grep -q "termux_orchestrator_env" "$shell_profile" 2>/dev/null; then
        echo "" >> "$shell_profile"
        echo "# Termux Orchestrator environment" >> "$shell_profile"
        echo "if [ -f \"\$HOME/.termux_orchestrator_env\" ]; then" >> "$shell_profile"
        echo "    $source_line" >> "$shell_profile"  
        echo "fi" >> "$shell_profile"
        
        log "SUCCESS" "Auto-sourcing added to $shell_profile"
    else
        log "INFO" "Auto-sourcing already configured"
    fi
}

# Create helper scripts
create_helper_scripts() {
    log "INFO" "Creating helper scripts..."
    
    local bin_dir="$ORCHESTRATOR_HOME/bin"
    mkdir -p "$bin_dir"
    
    # Orchestrator command wrapper
    cat > "$bin_dir/orchestrator" << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
# Termux Orchestrator main command

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
ORCHESTRATOR_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"

# Load environment
if [ -f "$HOME/.termux_orchestrator_env" ]; then
    source "$HOME/.termux_orchestrator_env"
fi

# Run the appropriate orchestrator component
case "$1" in
    "generate"|"scaffold")
        shift
        node "$ORCHESTRATOR_ROOT/termux-orchestrator-agents/src/agents/index.js" "$@"
        ;;
    "build")
        shift  
        node "$ORCHESTRATOR_ROOT/termux-orchestrator-ci/ci/trigger_ci.js" "$@"
        ;;
    "deliver"|"install")
        shift
        "$ORCHESTRATOR_ROOT/termux-orchestrator-delivery/delivery/poll_and_deliver.sh" "$@"
        ;;
    "env")
        case "$2" in
            "edit") orchestrator-env-edit ;;
            "validate") orchestrator-env-validate ;;
            "source") orchestrator-env-source ;;
            *) echo "Usage: orchestrator env {edit|validate|source}" ;;
        esac
        ;;
    *)
        echo "Termux Orchestrator - Natural Language to Mobile App Generator"
        echo ""
        echo "Usage: orchestrator <command> [options]"
        echo ""
        echo "Commands:"
        echo "  generate <description>  Generate app from natural language"
        echo "  scaffold <appspec>      Generate project from AppSpec JSON"
        echo "  build <project>         Trigger CI/CD build"
        echo "  deliver <build-id>      Download and install APK"
        echo "  env <action>           Environment management"
        echo ""
        echo "Examples:"
        echo "  orchestrator generate 'A todo app with dark mode'"
        echo "  orchestrator scaffold ./my-app.json ./output"
        echo "  orchestrator build --ci codemagic --repo user/app"
        echo "  orchestrator env validate"
        ;;
esac
EOF

    chmod +x "$bin_dir/orchestrator"
    
    log "SUCCESS" "Helper scripts created"
}

# Validate Termux environment
validate_termux() {
    log "INFO" "Validating Termux environment..."
    
    local errors=()
    
    # Check if we're in Termux
    if [ ! -d "/data/data/com.termux" ]; then
        errors+=("Not running in Termux environment")
    fi
    
    # Check storage permission
    if [ ! -w "$HOME" ]; then
        errors+=("No write permission to home directory")
    fi
    
    # Check essential commands
    local commands=("node" "npm" "git" "curl")
    for cmd in "${commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            errors+=("Missing required command: $cmd")
        fi
    done
    
    if [ ${#errors[@]} -eq 0 ]; then
        log "SUCCESS" "Termux environment validation passed"
        return 0
    else
        log "ERROR" "Environment validation failed:"
        for error in "${errors[@]}"; do
            log "ERROR" "  - $error"
        done
        return 1
    fi
}

# Print setup summary
print_summary() {
    echo
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║                   SETUP COMPLETE!                           ║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo
    echo -e "${GREEN}✅ Environment file created: ${ENV_FILE}${NC}"
    echo -e "${GREEN}✅ Directory structure setup${NC}"
    echo -e "${GREEN}✅ Shell integration configured${NC}"
    echo -e "${GREEN}✅ Helper scripts installed${NC}"
    echo
    echo -e "${YELLOW}📋 Next Steps:${NC}"
    echo -e "${YELLOW}1. Edit environment file:${NC} orchestrator-env-edit"
    echo -e "${YELLOW}2. Add your API keys and tokens${NC}"
    echo -e "${YELLOW}3. Validate configuration:${NC} orchestrator-env-validate"
    echo -e "${YELLOW}4. Restart shell or run:${NC} source ~/.termux_orchestrator_env"
    echo
    echo -e "${BLUE}🚀 Then try:${NC} orchestrator generate 'A simple todo app'"
    echo
}

# Main setup function
main() {
    log "INFO" "Starting Termux Orchestrator environment setup..."
    
    # Pre-flight checks
    validate_termux || {
        log "ERROR" "Environment validation failed. Please fix issues and try again."
        exit 1
    }
    
    # Setup steps
    setup_directories
    backup_existing_env
    create_env_file
    setup_auto_sourcing
    create_helper_scripts
    
    log "SUCCESS" "Environment setup completed successfully!"
    print_summary
}

# Run main function with error handling
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@" 2>&1 | tee -a "$LOG_FILE"
fi